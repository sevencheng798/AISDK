/*
 * Copyright 2018 gm its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

#include <memory>
#include <iostream>
#include <fstream>
#include <string>
#include <dirent.h>
#include <unistd.h>
#include <cstdio>

#include "Utils/MediaPlayer/MediaPlayerObserverInterface.h"
#include "AudioMediaPlayer/AOWrapper.h"

using namespace aisdk::mediaPlayer::ffmpeg;

namespace util {
int kbhit();
}

int util::kbhit()
{
    struct timeval tv;
    fd_set rdfs;

    tv.tv_sec = 0;
    tv.tv_usec = 0;

    FD_ZERO(&rdfs);
    FD_SET(STDIN_FILENO, &rdfs);

    select(STDIN_FILENO + 1, &rdfs, NULL, NULL, &tv);

    return FD_ISSET(STDIN_FILENO, &rdfs);
}

class AudioPlayerTest 
	: public aisdk::utils::mediaPlayer::MediaPlayerObserverInterface
	, public std::enable_shared_from_this<AudioPlayerTest> {
public:

	static std::shared_ptr<AudioPlayerTest> createNew();

	~AudioPlayerTest(){ 
		std::cout << "AudioPlayerTest destructor..." << std::endl;
		if(m_aoWrapper) 
			m_aoWrapper.reset();
		
	}

	/// Set Observer
	void init();

	bool run(std::shared_ptr<std::istream> stream);

	bool run(std::string &url, std::chrono::milliseconds &offset);

	/// Master process tasks
	bool play();
	
	/// @name MediaPlayerObserverInterface functions
	/// @{
	void onPlaybackStarted(SourceId id) override;

    void onPlaybackFinished(SourceId id) override;

    void onPlaybackError(SourceId id, const aisdk::utils::mediaPlayer::ErrorType& type, std::string error) override;

    void onPlaybackStopped(SourceId id) override;

	void onPlaybackPaused(SourceId id) override;

	void onPlaybackResumed(SourceId id) override;

	///@}
	
private:
	std::shared_ptr<AOWrapper> m_aoWrapper;

	AOWrapper::SourceId m_sourceID;

	std::shared_ptr<std::istream> m_stream;
};

std::shared_ptr<AudioPlayerTest> AudioPlayerTest::createNew() {
	auto instance = std::shared_ptr<AudioPlayerTest>(new AudioPlayerTest);
	if(instance){
		instance->init();
		std::cout << "set init OK" << std::endl;
		return instance;
	}

	return nullptr;
}

void AudioPlayerTest::init(){
std::cout << "set init" << std::endl;

	/// Create httpcontentFetch object.
	auto engine = AOEngine::create();
	
	/// Create AOWrapper object
	auto pa = AOWrapper::create(engine);
	if(!pa){
		std::cout << "Create pa failed\n" << std::endl;
		return;
	}

	m_aoWrapper = std::move(pa);
	m_aoWrapper->setObserver(shared_from_this());
}

bool AudioPlayerTest::run(std::shared_ptr<std::istream> stream){
	
	m_sourceID = m_aoWrapper->setSource(stream, true);
	if(aisdk::utils::mediaPlayer::MediaPlayerInterface::ERROR == m_sourceID){
		std::cout << "setSourceFailed" << std::endl;
		return false;
	}
	std::cout << "SourceId : " << m_sourceID << std::endl;

	this->play();

	return true;
}

bool AudioPlayerTest::run(std::string &url, std::chrono::milliseconds &offset){
	m_sourceID = m_aoWrapper->setSource(url, offset);
	if(aisdk::utils::mediaPlayer::MediaPlayerInterface::ERROR == m_sourceID){
		std::cout << "setSourceFailed" << std::endl;
		return false;
	}
	std::cout << "SourceId : " << m_sourceID << std::endl;

	this->play();
	
	return true;
}

bool AudioPlayerTest::play(){

	std::cout << "Playback with portaudio" << std::endl << std::endl;

	std::cout << "Options: " << std::endl;
	std::cout << " p: play sound" << std::endl;
	std::cout << " r: resume sound" << std::endl;
	std::cout << " s: stop sound" << std::endl;
	std::cout << " z: pause sounds" << std::endl << std::endl;

	std::cout << "Press 'Q' to quit" << std::endl;

	int ch; 			
	bool done = false;
	while (!done)
	{
		if(!util::kbhit()) {
			ch = getchar();
			switch (ch) {
			case 'q':
			case 'Q':
					done = true;
					break;
			case 'p':
			case 'P':
					m_aoWrapper->play(m_sourceID);
					break;
			case 'r':
			case 'R':
					m_aoWrapper->resume(m_sourceID);
					break;
			case 's':
			case 'S':
					m_aoWrapper->stop(m_sourceID);
					break;
			case 'z':
			case 'Z':
					m_aoWrapper->pause(m_sourceID);
					break;
			default:
					break;
			}
		}
	}
	
	m_aoWrapper->shutdown();
	
	if(!m_aoWrapper){
		std::cout << "pa be destory" << std::endl;
	}
	
	return true;
}

void AudioPlayerTest::onPlaybackStarted(SourceId id){
	if(id == m_sourceID){
		std::cout << " Start..." << std::endl;
	}else
		std::cout << " source isnot match currentID: " << m_sourceID << "newId: " << id << std::endl;
}

void AudioPlayerTest::onPlaybackFinished(SourceId id){
	if(id == m_sourceID){
		std::cout << " Finished ..." << std::endl;
	}else
		std::cout << " source isnot match currentID: " << m_sourceID << "newId: " << id << std::endl;

}	

void AudioPlayerTest::onPlaybackError(SourceId id, const aisdk::utils::mediaPlayer::ErrorType& type, std::string error){
	if(id == m_sourceID){
		std::cout << " Error ..." << std::endl;
		auto errStr = aisdk::utils::mediaPlayer::errorTypeToString(type);
		std::cout << errStr << std::endl;
	}else
		std::cout << " source isnot match currentID: " << m_sourceID << "newId: " << id << std::endl;

}

void AudioPlayerTest::onPlaybackStopped(SourceId id){
	if(id == m_sourceID){
		std::cout << " stopped ..." << std::endl;
	}else
		std::cout << " source isnot match currentID: " << m_sourceID << "newId: " << id << std::endl;

}

void AudioPlayerTest::onPlaybackPaused(SourceId id){
	if(id == m_sourceID){
		std::cout << " paused ..." << std::endl;
	}else
		std::cout << " source isnot match currentID: " << m_sourceID << "newId: " << id << std::endl;

}

void AudioPlayerTest::onPlaybackResumed(SourceId id){
	if(id == m_sourceID){
		std::cout << " resumed ..." << std::endl;
	}else
		std::cout << " source isnot match currentID: " << m_sourceID << "newId: " << id << std::endl;

}

void PaHelp(){
	printf("Options: AOWrapperTest [options]\n" \
		"\t -u set play a url resource.\n" \
		"\t -f Set play a filename stream resource.\n" \
		"\t -p set url stream start position[uint: sec]\n");
}

int work(std::string &url, std::string &filename, std::chrono::milliseconds offset){
	auto audioPlayer = AudioPlayerTest::createNew();
	std::cout << "user count: " << audioPlayer.use_count() << std::endl;

	if(!url.empty()){
		std::cout << "offset: " << offset.count() << std::endl;
		audioPlayer->run(url, offset);
	}else if(!filename.empty()){
		std::shared_ptr<std::ifstream> input = std::make_shared<std::ifstream>();
		input->open(filename, std::ifstream::in);
		if(!input->is_open()){
			std::cout << "Open the file is failed\n" << std::endl;
			return -1;
		}
		audioPlayer->run(input);
	}else{
		audioPlayer.reset();
	}	
	
	std::cout << "user count: " << audioPlayer.use_count() << std::endl;
	audioPlayer.reset();
	std::cout << "play finished" << std::endl;

	return 0;
}

int main(int argc, char *argv[]){
	//std::shared_ptr<std::ifstream> input;
	std::string url;
	std::string filename;
	std::chrono::milliseconds offset = std::chrono::milliseconds::zero();
		
	int opt;
	
	while((opt = getopt(argc, argv, "hu:p:f:")) != -1) {
	switch (opt) {
		case 'u':
			url = optarg;
			break;
		case 'p':
			offset = std::chrono::milliseconds(atoi(optarg)*1000);
			break;
		case 'f':
			filename = optarg;
			break;
		case 'h':
			PaHelp();
			exit(EXIT_FAILURE);
		default:
			printf("optopt = %c\n", (char)optopt);
			printf("opterr = %d\n", opterr);
			fprintf(stderr, "usage: \n");
			PaHelp();
		   exit(EXIT_FAILURE);
	}
	}

	work(url, filename, offset);

	std::cout << "play finished exit==========" << std::endl;
}

